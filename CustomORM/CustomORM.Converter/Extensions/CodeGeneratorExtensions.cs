using System.Text;

namespace CustomORM.Converter.Extensions
{
    internal static class CodeGeneratorExtensions
    {
        internal static StringBuilder AddUsingReferences(this StringBuilder codeSource)
        {
            codeSource.AppendLine("// <auto-generated> This file has been auto generated by CustomORM.Converter. </auto-generated>");
            codeSource.AppendLine("#nullable enable");
            codeSource.AppendLine();
            codeSource.AppendLine("using System;");
            codeSource.AppendLine("using System.Collections.Generic;");
            codeSource.AppendLine("using System.ComponentModel.DataAnnotations;");
            codeSource.AppendLine();

            return codeSource;
        }

        internal static StringBuilder AddNamespace(this StringBuilder codeSource, string namespaceTarget)
        {
            if (namespaceTarget.Length > 0)
            {
                codeSource.AppendLine($"namespace {namespaceTarget};");
                codeSource.AppendLine();
            }

            return codeSource;
        }

        internal static StringBuilder GenerateCodeClassEntity(string hubPath, string viewPath, string entityName)
        {
            StringBuilder sb = new StringBuilder();

            var hubLines = File.ReadLines(hubPath);
            var viewLines = File.ReadLines(viewPath);
            var hubProperties = PropertiesExtractor.GetProperties(hubLines);
            var viewProperties = PropertiesExtractor.GetProperties(viewLines);
            var functionalKeyProperty = PropertiesExtractor.GetFunctionnalKeyProperty(hubProperties, viewProperties);
            var annotationKeyProperty = PropertiesExtractor.GetAnnotation(functionalKeyProperty, viewLines);
            var linkedTargets = PropertiesExtractor.GetLinkedObject(hubLines, entityName);

            sb.AppendLine($"public partial class {entityName}");
            sb.AppendLine("{");
            sb.AppendIndentedLine("[Key]");
            if (annotationKeyProperty != null)
                sb.AppendIndentedLine(annotationKeyProperty);
            sb.AppendIndentedLine(functionalKeyProperty);
            sb.AppendLine();

            var noFunctionnalKeyProperties = PropertiesExtractor.GetNoFunctionnalKeyProperties(hubProperties, viewProperties);

            foreach (var (property, index) in noFunctionnalKeyProperties.WithIndex())
            {
                var annotationProperty = PropertiesExtractor.GetAnnotation(property, viewLines);
                if (annotationProperty != null)
                    sb.AppendIndentedLine(annotationProperty);
                sb.AppendIndentedLine(property);

                if (index != noFunctionnalKeyProperties.Count - 1)
                    sb.AppendLine();
            }

            foreach (var linkedtarget in linkedTargets)
            {
                sb.AppendLine();
                sb.AppendIndentedLine(linkedtarget);
            }

            sb.AppendLine("}");

            return sb;
        }
    }
}
